# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses docker
# image: docker:latest

# And to cache them as well.
cache:
  paths:
    - node_modules/
    - .yarn
    - cache/Cypress

# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled
# You specify the stages. Those are the steps that GitLab will go through 
# Order matters.  
stages:
  # - test
  - e2e-test
  - build
  # - staging
  - production

# Test:
#   image: node:12.5.0
#   stage: test
#   before_script: 
#     - yarn install --frozen-lockfile
#   script:
#     - CI=true yarn test --coverage

End to end test:
  image: cypress/base:10
  stage: e2e-test
  before_script: 
    - yarn install --frozen-lockfile
  script:
    # check Cypress binary path and cached versions
    # useful to make sure we are not carrying around old versions
    - npx cypress install
    - npx cypress cache path
    - npx cypress cache list
    - yarn e2e-test

Build:
  image: node:12.5.0
  stage: build
  before_script: 
    - yarn config set cache-folder .yarn
    - yarn install 
  script:
    - yarn build
  artifacts:
    expire_in: 1 week
    paths:
      - build

Deploy to Production:
  image: alpine
  stage: production
  script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -rav build ubuntu@54.255.249.17:social-media-dashboard